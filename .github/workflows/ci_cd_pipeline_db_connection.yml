name: CI/CD Pipeline DB Connection

on:
  push:
    branches:
      - main
    paths:
      - '_2_services/db_connection/docker/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build, tag, and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: _2_services/db_connection/docker
        push: true
        tags: |
          fberton98/db_connection:test
          ghcr.io/${{ github.repository }}/db_connection:latest
        platforms: linux/amd64,linux/arm64
        labels: |
          maintainer=fberton98
          version=1.0.0

  unit-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Run Unit Tests
      run: |
        docker run --rm fberton98/db_connection:test python -m unittest discover -s /app || { echo 'Unit tests failed'; exit 1; }    

  cluster-test:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
    - name: Install sshpass
      run: sudo apt-get install -y sshpass
    - name: Test Deployment
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_PORT: ${{ secrets.SSH_PORT }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST <<EOF
          set -e
          cd k8_healtcare_cluster/_2_services/db_connection/test
          kubectl apply -f deployment_service_test.yaml
          trap 'kubectl delete -f deployment_service_test.yaml' EXIT
          kubectl wait --for=condition=available --timeout=600s deployment/db-connection-deployment-test
          POD_NAME=\$(kubectl get pods --selector component=db-connection-test -o jsonpath='{.items[0].metadata.name}')
          kubectl wait --for=condition=ready pod/\$POD_NAME --timeout=600s
          echo "Running smoke test..."
          kubectl exec -i \$POD_NAME -- python3 /app/smoke_test.py
          kubectl delete -f deployment_service_test.yaml
        EOF

  image-update:
    runs-on: ubuntu-latest
    needs: cluster-test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Tag and push image if tests pass
      run: |
        docker pull fberton98/db_connection:test
        docker tag fberton98/db_connection:test fberton98/db_connection:latest
        docker push fberton98/db_connection:latest

  deploy:
    runs-on: ubuntu-latest
    needs: image-update
    steps:
    - name: Install sshpass
      run: sudo apt-get install -y sshpass
    - name: Restart Kubernetes deployment
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_PORT: ${{ secrets.SSH_PORT }}
      run: |
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$SSH_HOST <<EOF
          kubectl rollout restart deployment db-connection-deployment
        EOF